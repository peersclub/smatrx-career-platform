// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  skills        UserSkill[]
  careerGoals   CareerGoal[]
  learningPaths LearningPath[]
  progress      Progress[]
  achievements  Achievement[]
  imports       SkillImport[]
  analyses      SkillAnalysis[]

  // New Credibility Platform Relations
  educationRecords        EducationRecord[]
  socialProfiles          SocialProfile[]
  certifications          Certification[]
  githubProfile           GitHubProfile?
  credibilityScore        CredibilityScore?
  careerSuggestions       CareerSuggestion[]
  publicProfile           PublicProfile?
  profileViews            ProfileView[]
  dataSourceSyncs         DataSourceSync[]
  verificationRequests    VerificationRequest[]
  resourceRecommendations ResourceRecommendation[]

  @@index([email])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Profile {
  id                    String    @id @default(cuid())
  userId                String    @unique
  bio                   String?
  title                 String?
  company               String?
  location              String?
  linkedinUrl           String?
  githubUrl             String?
  websiteUrl            String?
  yearsExperience       Int?
  careerStage           String? // student, entry, mid, senior, lead, executive
  industries            String[]
  languages             String[]
  availability          String? // full-time, part-time, contract, freelance
  remotePreference      String? // remote, hybrid, onsite
  salaryExpectation     Json? // { min, max, currency }
  targetRole            String?
  careerTimeline        String? // immediate, 3months, 6months, 1year, exploring
  willingToRelocate     Boolean   @default(false)
  preferredLocations    String[]
  onboardingCompleted   Boolean   @default(false)
  onboardingCompletedAt DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Skills and Categories
model Skill {
  id            String   @id @default(cuid())
  name          String   @unique
  slug          String   @unique
  description   String?
  categoryId    String
  tags          String[]
  aliases       String[]
  relatedSkills String[]
  marketData    Json? // demand score, trend, job count, salary data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category    SkillCategory   @relation(fields: [categoryId], references: [id])
  userSkills  UserSkill[]
  requiredFor RequiredSkill[]

  @@index([slug])
  @@index([categoryId])
}

model SkillCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  parentId    String?
  description String?
  icon        String?
  color       String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   SkillCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children SkillCategory[] @relation("CategoryHierarchy")
  skills   Skill[]

  @@index([slug])
  @@index([parentId])
}

model UserSkill {
  id               String    @id @default(cuid())
  userId           String
  skillId          String
  level            String // beginner, intermediate, advanced, expert
  yearsExperience  Float?
  source           String // linkedin, github, resume, manual, verified
  verified         Boolean   @default(false)
  verifiedAt       DateTime?
  endorsements     Int       @default(0)
  lastUsed         DateTime?
  proficiencyScore Int? // 0-100
  evidence         Json? // projects, certifications, etc.
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId])
  @@index([userId])
  @@index([skillId])
}

// Career Goals and Roles
model CareerGoal {
  id           String    @id @default(cuid())
  userId       String
  title        String
  description  String?
  roleId       String?
  targetDate   DateTime?
  targetSalary Json? // { min, max, currency }
  priority     Int       @default(0)
  status       String    @default("active") // active, achieved, paused, cancelled
  motivations  String[]
  constraints  String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  role          CareerRole?    @relation(fields: [roleId], references: [id])
  learningPaths LearningPath[]
  skillMatches  SkillMatch[]

  @@index([userId])
  @@index([roleId])
}

model CareerRole {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  description     String?
  industry        String?
  level           String? // junior, mid, senior, lead, principal
  typicalSalary   Json? // { min, max, median, currency }
  growthRate      Float?
  demandScore     Float?
  remoteAvailable Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  requiredSkills RequiredSkill[]
  careerGoals    CareerGoal[]

  @@index([slug])
}

model RequiredSkill {
  id         String @id @default(cuid())
  roleId     String
  skillId    String
  level      String // Required proficiency level
  importance String // must-have, nice-to-have, preferred
  weight     Float  @default(1.0)

  role  CareerRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  skill Skill      @relation(fields: [skillId], references: [id])

  @@unique([roleId, skillId])
  @@index([roleId])
  @@index([skillId])
}

// Learning and Progress
model LearningPath {
  id                String    @id @default(cuid())
  userId            String
  goalId            String?
  name              String
  title             String?
  description       String?
  targetRole        String?
  estimatedHours    Int?
  estimatedWeeks    Int?
  estimatedDuration Int? // in weeks
  difficulty        String? // beginner, intermediate, advanced
  status            String    @default("not_started") // not_started, draft, active, completed, paused
  recommendations   Json? // Store course recommendations
  completedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal       CareerGoal? @relation(fields: [goalId], references: [id])
  milestones Milestone[]
  progress   Progress[]

  @@index([userId])
  @@index([goalId])
}

model Milestone {
  id          String    @id @default(cuid())
  pathId      String
  order       Int
  title       String
  description String?
  skills      String[]
  resources   Json[] // Array of resource objects
  duration    Int? // hours
  deadline    DateTime?
  completed   Boolean   @default(false)
  completedAt DateTime?
  feedback    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  path     LearningPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@index([pathId])
}

model Progress {
  id          String    @id @default(cuid())
  userId      String
  pathId      String?
  milestoneId String?
  type        String // skill, milestone, path, achievement
  status      String // started, in-progress, completed
  percentage  Int       @default(0)
  timeSpent   Int       @default(0) // minutes
  notes       String?
  metadata    Json?
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  path      LearningPath? @relation(fields: [pathId], references: [id])
  milestone Milestone?    @relation(fields: [milestoneId], references: [id])

  @@index([userId])
  @@index([pathId])
  @@index([milestoneId])
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String // skill, learning, career, community, streak
  name        String
  description String?
  icon        String?
  metadata    Json?
  unlockedAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

// Skill Import and Analysis
model SkillImport {
  id          String    @id @default(cuid())
  userId      String
  source      String // linkedin, github, resume
  status      String // pending, processing, completed, failed
  data        Json? // Raw imported data
  results     Json? // Processed results
  error       String?
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([source])
}

model SkillAnalysis {
  id              String   @id @default(cuid())
  userId          String
  type            String // comprehensive, quick, role-specific
  results         Json // Full analysis results
  recommendations Json? // AI recommendations
  marketInsights  Json? // Market data snapshot
  createdAt       DateTime @default(now())

  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  matches SkillMatch[]

  @@index([userId])
  @@index([type])
}

model SkillMatch {
  id         String   @id @default(cuid())
  analysisId String
  goalId     String
  matchScore Float // 0-100
  gaps       Json // Skill gaps identified
  strengths  Json // Matching skills
  readiness  Json // Readiness assessment
  createdAt  DateTime @default(now())

  analysis SkillAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  goal     CareerGoal    @relation(fields: [goalId], references: [id])

  @@index([analysisId])
  @@index([goalId])
}

// ============================================
// CREDIBILITY PLATFORM MODELS
// ============================================

// Education & Academic Verification
model EducationRecord {
  id                 String    @id @default(cuid())
  userId             String
  institutionName    String
  degree             String
  field              String?
  gpa                Float?
  startDate          DateTime
  endDate            DateTime?
  verified           Boolean   @default(false)
  verificationSource String?
  verificationDate   DateTime?
  transcriptUrl      String?
  credentialId       String?
  metadata           Json?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([verified])
}

// Social Media Profiles & Analytics
model SocialProfile {
  id             String   @id @default(cuid())
  userId         String
  platform       String
  username       String
  profileUrl     String?
  verified       Boolean  @default(false)
  followerCount  Int?
  followingCount Int?
  engagementRate Float?
  contentScore   Float?
  influenceScore Float?
  lastFetchedAt  DateTime
  metrics        Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@index([userId])
  @@index([platform])
  @@index([verified])
}

// Certifications & Learning Credentials
model Certification {
  id                  String    @id @default(cuid())
  userId              String
  name                String
  issuer              String
  issueDate           DateTime
  expiryDate          DateTime?
  credentialId        String?
  credentialUrl       String?
  verified            Boolean   @default(false)
  verificationMethod  String?
  skillsEarned        String[]
  certificateImageUrl String?
  metadata            Json?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([issuer])
  @@index([verified])
}

// Enhanced GitHub Analytics
model GitHubProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  username          String
  profileUrl        String?
  totalRepos        Int      @default(0)
  totalCommits      Int      @default(0)
  totalPRs          Int      @default(0)
  totalIssues       Int      @default(0)
  totalStars        Int      @default(0)
  languagesUsed     Json     @default("{}")
  contributionScore Float?
  consistencyScore  Float?
  codeQualityScore  Float?
  topRepos          Json?
  contributionGraph Json?
  lastFetchedAt     DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([username])
}

// Credibility Scoring System
model CredibilityScore {
  id                 String   @id @default(cuid())
  userId             String   @unique
  overallScore       Float    @default(0)
  educationScore     Float    @default(0)
  experienceScore    Float    @default(0)
  technicalScore     Float    @default(0)
  socialScore        Float    @default(0)
  certificationScore Float    @default(0)
  verificationLevel  String   @default("basic")
  breakdown          Json     @default("{}")
  badges             String[]
  calculatedAt       DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([overallScore(sort: Desc)])
  @@index([verificationLevel])
}

// AI-Powered Career Recommendations
model CareerSuggestion {
  id             String   @id @default(cuid())
  userId         String
  role           String
  readinessScore Float
  estimatedTime  String?
  estimatedWeeks Int?
  skillGaps      Json     @default("[]")
  matchingSkills Json     @default("[]")
  resources      Json     @default("[]")
  reasoning      String?
  priority       Int      @default(3)
  status         String   @default("active")
  aiModel        String?
  confidence     Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resourceRecommendations ResourceRecommendation[]

  @@index([userId])
  @@index([readinessScore(sort: Desc)])
  @@index([status])
  @@index([priority(sort: Desc)])
}

// Public Profile Settings
model PublicProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  username        String    @unique
  slug            String    @unique
  isPublic        Boolean   @default(false)
  customDomain    String?   @unique
  theme           String    @default("professional")
  visibleSections Json      @default("{}")
  seoTitle        String?
  seoDescription  String?
  ogImageUrl      String?
  viewCount       Int       @default(0)
  shareCount      Int       @default(0)
  lastViewedAt    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([username])
  @@index([slug])
  @@index([isPublic])
}

// Profile Analytics & Tracking
model ProfileView {
  id              String   @id @default(cuid())
  profileUserId   String
  viewerIp        String?
  viewerUserAgent String?
  referrer        String?
  country         String?
  city            String?
  viewedAt        DateTime @default(now())

  user User @relation(fields: [profileUserId], references: [id], onDelete: Cascade)

  @@index([profileUserId])
  @@index([viewedAt(sort: Desc)])
}

// Data Source Sync Status
model DataSourceSync {
  id            String    @id @default(cuid())
  userId        String
  source        String
  status        String    @default("pending")
  lastSyncAt    DateTime?
  nextSyncAt    DateTime?
  syncFrequency String    @default("daily")
  error         String?
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, source])
  @@index([userId])
  @@index([status])
  @@index([nextSyncAt])
}

// Verification Requests
model VerificationRequest {
  id            String    @id @default(cuid())
  userId        String
  type          String
  entityId      String
  status        String    @default("pending")
  method        String?
  documentUrls  String[]
  reviewerNotes String?
  submittedAt   DateTime  @default(now())
  reviewedAt    DateTime?
  reviewedBy    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([type])
}

// Learning Resource Recommendations
model ResourceRecommendation {
  id                 String   @id @default(cuid())
  userId             String
  careerSuggestionId String?
  type               String
  platform           String
  title              String
  url                String?
  provider           String?
  duration           String?
  cost               String?
  difficulty         String?
  skillsGained       String[]
  relevanceScore     Float?
  status             String   @default("suggested")
  metadata           Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  careerSuggestion CareerSuggestion? @relation(fields: [careerSuggestionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([careerSuggestionId])
}
