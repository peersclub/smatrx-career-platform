
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  image: 'image',
  emailVerified: 'emailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  refresh_token_expires_in: 'refresh_token_expires_in',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bio: 'bio',
  title: 'title',
  company: 'company',
  location: 'location',
  linkedinUrl: 'linkedinUrl',
  githubUrl: 'githubUrl',
  websiteUrl: 'websiteUrl',
  yearsExperience: 'yearsExperience',
  careerStage: 'careerStage',
  industries: 'industries',
  languages: 'languages',
  availability: 'availability',
  remotePreference: 'remotePreference',
  salaryExpectation: 'salaryExpectation',
  targetRole: 'targetRole',
  careerTimeline: 'careerTimeline',
  willingToRelocate: 'willingToRelocate',
  preferredLocations: 'preferredLocations',
  onboardingCompleted: 'onboardingCompleted',
  onboardingCompletedAt: 'onboardingCompletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  categoryId: 'categoryId',
  tags: 'tags',
  aliases: 'aliases',
  relatedSkills: 'relatedSkills',
  marketData: 'marketData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  parentId: 'parentId',
  description: 'description',
  icon: 'icon',
  color: 'color',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSkillScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skillId: 'skillId',
  level: 'level',
  yearsExperience: 'yearsExperience',
  source: 'source',
  verified: 'verified',
  verifiedAt: 'verifiedAt',
  endorsements: 'endorsements',
  lastUsed: 'lastUsed',
  proficiencyScore: 'proficiencyScore',
  evidence: 'evidence',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CareerGoalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  roleId: 'roleId',
  targetDate: 'targetDate',
  targetSalary: 'targetSalary',
  priority: 'priority',
  status: 'status',
  motivations: 'motivations',
  constraints: 'constraints',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CareerRoleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  industry: 'industry',
  level: 'level',
  typicalSalary: 'typicalSalary',
  growthRate: 'growthRate',
  demandScore: 'demandScore',
  remoteAvailable: 'remoteAvailable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RequiredSkillScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  skillId: 'skillId',
  level: 'level',
  importance: 'importance',
  weight: 'weight'
};

exports.Prisma.LearningPathScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  goalId: 'goalId',
  name: 'name',
  title: 'title',
  description: 'description',
  targetRole: 'targetRole',
  estimatedHours: 'estimatedHours',
  estimatedWeeks: 'estimatedWeeks',
  estimatedDuration: 'estimatedDuration',
  difficulty: 'difficulty',
  status: 'status',
  recommendations: 'recommendations',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  pathId: 'pathId',
  order: 'order',
  title: 'title',
  description: 'description',
  skills: 'skills',
  resources: 'resources',
  duration: 'duration',
  deadline: 'deadline',
  completed: 'completed',
  completedAt: 'completedAt',
  feedback: 'feedback',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  pathId: 'pathId',
  milestoneId: 'milestoneId',
  type: 'type',
  status: 'status',
  percentage: 'percentage',
  timeSpent: 'timeSpent',
  notes: 'notes',
  metadata: 'metadata',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  name: 'name',
  description: 'description',
  icon: 'icon',
  metadata: 'metadata',
  unlockedAt: 'unlockedAt'
};

exports.Prisma.SkillImportScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  source: 'source',
  status: 'status',
  data: 'data',
  results: 'results',
  error: 'error',
  startedAt: 'startedAt',
  completedAt: 'completedAt'
};

exports.Prisma.SkillAnalysisScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  results: 'results',
  recommendations: 'recommendations',
  marketInsights: 'marketInsights',
  createdAt: 'createdAt'
};

exports.Prisma.SkillMatchScalarFieldEnum = {
  id: 'id',
  analysisId: 'analysisId',
  goalId: 'goalId',
  matchScore: 'matchScore',
  gaps: 'gaps',
  strengths: 'strengths',
  readiness: 'readiness',
  createdAt: 'createdAt'
};

exports.Prisma.EducationRecordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  institutionName: 'institutionName',
  degree: 'degree',
  field: 'field',
  gpa: 'gpa',
  startDate: 'startDate',
  endDate: 'endDate',
  verified: 'verified',
  verificationSource: 'verificationSource',
  verificationDate: 'verificationDate',
  transcriptUrl: 'transcriptUrl',
  credentialId: 'credentialId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SocialProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  platform: 'platform',
  username: 'username',
  profileUrl: 'profileUrl',
  verified: 'verified',
  followerCount: 'followerCount',
  followingCount: 'followingCount',
  engagementRate: 'engagementRate',
  contentScore: 'contentScore',
  influenceScore: 'influenceScore',
  lastFetchedAt: 'lastFetchedAt',
  metrics: 'metrics',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CertificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  issuer: 'issuer',
  issueDate: 'issueDate',
  expiryDate: 'expiryDate',
  credentialId: 'credentialId',
  credentialUrl: 'credentialUrl',
  verified: 'verified',
  verificationMethod: 'verificationMethod',
  skillsEarned: 'skillsEarned',
  certificateImageUrl: 'certificateImageUrl',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GitHubProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  username: 'username',
  profileUrl: 'profileUrl',
  totalRepos: 'totalRepos',
  totalCommits: 'totalCommits',
  totalPRs: 'totalPRs',
  totalIssues: 'totalIssues',
  totalStars: 'totalStars',
  languagesUsed: 'languagesUsed',
  contributionScore: 'contributionScore',
  consistencyScore: 'consistencyScore',
  codeQualityScore: 'codeQualityScore',
  topRepos: 'topRepos',
  contributionGraph: 'contributionGraph',
  lastFetchedAt: 'lastFetchedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CredibilityScoreScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  overallScore: 'overallScore',
  educationScore: 'educationScore',
  experienceScore: 'experienceScore',
  technicalScore: 'technicalScore',
  socialScore: 'socialScore',
  certificationScore: 'certificationScore',
  verificationLevel: 'verificationLevel',
  breakdown: 'breakdown',
  badges: 'badges',
  calculatedAt: 'calculatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CareerSuggestionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  role: 'role',
  readinessScore: 'readinessScore',
  estimatedTime: 'estimatedTime',
  estimatedWeeks: 'estimatedWeeks',
  skillGaps: 'skillGaps',
  matchingSkills: 'matchingSkills',
  resources: 'resources',
  reasoning: 'reasoning',
  priority: 'priority',
  status: 'status',
  aiModel: 'aiModel',
  confidence: 'confidence',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PublicProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  username: 'username',
  slug: 'slug',
  isPublic: 'isPublic',
  customDomain: 'customDomain',
  theme: 'theme',
  visibleSections: 'visibleSections',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  ogImageUrl: 'ogImageUrl',
  viewCount: 'viewCount',
  shareCount: 'shareCount',
  lastViewedAt: 'lastViewedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileViewScalarFieldEnum = {
  id: 'id',
  profileUserId: 'profileUserId',
  viewerIp: 'viewerIp',
  viewerUserAgent: 'viewerUserAgent',
  referrer: 'referrer',
  country: 'country',
  city: 'city',
  viewedAt: 'viewedAt'
};

exports.Prisma.DataSourceSyncScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  source: 'source',
  status: 'status',
  lastSyncAt: 'lastSyncAt',
  nextSyncAt: 'nextSyncAt',
  syncFrequency: 'syncFrequency',
  error: 'error',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  entityId: 'entityId',
  status: 'status',
  method: 'method',
  documentUrls: 'documentUrls',
  reviewerNotes: 'reviewerNotes',
  submittedAt: 'submittedAt',
  reviewedAt: 'reviewedAt',
  reviewedBy: 'reviewedBy'
};

exports.Prisma.ResourceRecommendationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  careerSuggestionId: 'careerSuggestionId',
  type: 'type',
  platform: 'platform',
  title: 'title',
  url: 'url',
  provider: 'provider',
  duration: 'duration',
  cost: 'cost',
  difficulty: 'difficulty',
  skillsGained: 'skillsGained',
  relevanceScore: 'relevanceScore',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  Profile: 'Profile',
  Skill: 'Skill',
  SkillCategory: 'SkillCategory',
  UserSkill: 'UserSkill',
  CareerGoal: 'CareerGoal',
  CareerRole: 'CareerRole',
  RequiredSkill: 'RequiredSkill',
  LearningPath: 'LearningPath',
  Milestone: 'Milestone',
  Progress: 'Progress',
  Achievement: 'Achievement',
  SkillImport: 'SkillImport',
  SkillAnalysis: 'SkillAnalysis',
  SkillMatch: 'SkillMatch',
  EducationRecord: 'EducationRecord',
  SocialProfile: 'SocialProfile',
  Certification: 'Certification',
  GitHubProfile: 'GitHubProfile',
  CredibilityScore: 'CredibilityScore',
  CareerSuggestion: 'CareerSuggestion',
  PublicProfile: 'PublicProfile',
  ProfileView: 'ProfileView',
  DataSourceSync: 'DataSourceSync',
  VerificationRequest: 'VerificationRequest',
  ResourceRecommendation: 'ResourceRecommendation'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
